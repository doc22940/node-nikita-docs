{"componentChunkName":"component---src-templates-template-js","path":"/about/developers/","result":{"data":{"page":{"html":"<h1 id=\"developer-information\" style=\"position:relative;\"><a href=\"#developer-information\" aria-label=\"developer information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Developer information</h1>\n<div class=\"toc\">\n<h2><a href=\"#toc\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#project-layout\">Project layout</a></p>\n<ul>\n<li><a href=\"#core-engine\">Core engine</a></li>\n<li><a href=\"#actions\">Actions</a></li>\n<li><a href=\"#utils-function\">Utils function</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tests-execution\">Tests execution</a></p>\n<ul>\n<li><a href=\"#ssh-or-locally\">SSH or locally</a></li>\n<li><a href=\"#customization\">Customization</a></li>\n<li><a href=\"#environments\">Environments</a></li>\n<li><a href=\"#docker\">Docker</a></li>\n<li><a href=\"#lxd\">LXD</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>You are encouraged to <a href=\"/about/contribute/\">contribute</a> to Nikita. There are multiple way to offer assistance to the project. To fix and write actions, you will have get your hands dirty and dive into the source code. This page describe the project layout and how to run the tests.</p>\n<h2 id=\"project-layout\" style=\"position:relative;\"><a href=\"#project-layout\" aria-label=\"project layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project layout</h2>\n<p>Nikita is organized as one monolithic <a href=\"https://github.com/adaltas/node-nikita\">GIT</a> repository, for the sake of clarity. It includes the core engine, user actions and utils functions ; all of them associated with their unit tests. </p>\n<p><a href=\"https://github.com/lerna/lerna\">Lerna</a> is used in independant mode. It optimizes the time and space requirements, allowing massive refactoring, updating and feature enrichment without any concern. </p>\n<h3 id=\"core-engine\" style=\"position:relative;\"><a href=\"#core-engine\" aria-label=\"core engine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Core engine</h3>\n<p>Core engine modules are at the root of the \"./lib\" directory.</p>\n<ul>\n<li>\"index\"<br>\nThe main Nikita entry point when issuing <code class=\"language-text\">require(&#39;nikita&#39;)</code>.</li>\n<li>\"register\"<br>\nRegister actions into the global namespace. All actions available by default are listed in this module.</li>\n<li>\"registry\"<br>\nManagement facility to register and unregister actions.</li>\n<li>\"session\"<br>\nThe Nikita session where most of the logic is wired. </li>\n</ul>\n<h3 id=\"actions\" style=\"position:relative;\"><a href=\"#actions\" aria-label=\"actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h3>\n<p>Actions modules are splitted across directories, either at the root of each “./lib” folders or inside “./lib/misc”. Each of those had been tested to be used in production, take a look at the below section. </p>\n<h3 id=\"utils-function\" style=\"position:relative;\"><a href=\"#utils-function\" aria-label=\"utils function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utils function</h3>\n<p>Utils function exports simple JavaScript functions and are located inside the \"./lib/misc\" directory. </p>\n<h2 id=\"tests-execution\" style=\"position:relative;\"><a href=\"#tests-execution\" aria-label=\"tests execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tests execution</h2>\n<p>Nikita target Unix-like system including Linux and macOS. Windows is not supported as a targeting node where to execute actions. It is however known to work as a Nikita host. This mean you can run Nikita from a Windows host as long as you are targeting Linux nodes over SSH.</p>\n<p>Tests are executed with <a href=\"https://mochajs.org/\">Mocha</a> and <a href=\"https://shouldjs.github.io/\">Should.js</a>. They are all located inside the \"./test\" folder.</p>\n<p>For the tests to execute successfully, you must:</p>\n<ul>\n<li>be online (attempt to fetch an ftp file)</li>\n<li>be able to ssh yourself (eg <code class=\"language-text\">ssh $(whoami)@localhost</code>) without a password</li>\n</ul>\n<p>To use Lerna, install it globally, bootstrap the packages to avoid dependencies issues with the following :</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Clone the repository</span>\n<span class=\"token function\">git</span> clone https://github.com/adaltas/node-nikita.git nikita\n<span class=\"token comment\"># Go to your nikita folder</span>\n<span class=\"token builtin class-name\">cd</span> ~/nikita\n<span class=\"token comment\"># Install the package dependencies, including lerna</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token comment\"># Equivalent to npm install &amp;&amp; npm run prepublish &amp;&amp; npm run prepare</span>\nnpx lerna bootstrap\n<span class=\"token comment\"># Symlink together all dependent packages</span>\nnpx lerna <span class=\"token function\">link</span></code></pre></div>\n<p><code class=\"language-text\">lerna run test</code> execute the full test suite while <code class=\"language-text\">npx mocha test/your_choice/*.coffee</code> execute a subset of the test suite.</p>\n<p>To run all package tests from the project directory run :\n<code class=\"language-text\">yarn workspace @nikitajs/core run test</code></p>\n<p>To only test the <code class=\"language-text\">nikita.file.ini</code> actions, run the following :\n<code class=\"language-text\">cd packages/core &amp;&amp; npx mocha test/file.ini/*.coffee</code>.</p>\n<h3 id=\"ssh-or-locally\" style=\"position:relative;\"><a href=\"#ssh-or-locally\" aria-label=\"ssh or locally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH or locally</h3>\n<p>Why even choose? All tests when it makes sense are executed twice. Once without an SSH connection and once with an SSH connection pointing to localhost. To achieve this behavior, we extended <a href=\"https://mochajs.org/\">Mocha</a> by providing an alternative to the <code class=\"language-text\">it</code> function in the name of <code class=\"language-text\">they</code>. You can find it in the <a href=\"https://github.com/adaltas/node-ssh2-they\">ssh2-they package</a>.</p>\n<p>For example, this test will only be executed locally:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">nikita <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nikita'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Simple Test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Check a file is touched'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    nikita\n    <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">touch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/a_file'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/a_file'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>While the same test using <code class=\"language-text\">they</code> will be executed locally and remotely:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">nikita <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nikita'</span><span class=\"token punctuation\">)</span>\nthey <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'they'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Simple Test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">they</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Check a file is touched'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ssh</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">nikita</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>ssh<span class=\"token operator\">:</span> ssh<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">touch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/a_file'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/a_file'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"customization\" style=\"position:relative;\"><a href=\"#customization\" aria-label=\"customization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customization</h3>\n<p>Tests will look by default for a configuration module located at \"./test\" file located inside \"./test.coffee\". If they do not find it, they will copy the default file \"./test.sample.coffee\" into \"./test.coffee\". Use the sample file as a starting point to configure your own environment.</p>\n<p>You can customize the path to the configuration module by setting the environmental variable named \"NIKITA_TEST_MODULE\".</p>\n<h3 id=\"environments\" style=\"position:relative;\"><a href=\"#environments\" aria-label=\"environments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environments</h3>\n<p>Some tests depends on a particular settings to run successfully. Some actions are specific to a particular Linux distribution or issue internally alternatives commands which must be validated. Other actions depends on a service which is not always available on the hosts machine such as a database connection.</p>\n<p>Based on your environment support, targeted tests may be activated from the configuration. Tests are labeled with tags. Environment defined the test coverage by activating tags in their <code class=\"language-text\">test.coffee</code> configuration file. For example, to activate the MariaDB tests located in the <a href=\"package/db/env/mariadb/test.coffee\">db package</a>, set the <code class=\"language-text\">tags.db</code> property to <code class=\"language-text\">true</code> and configure the <code class=\"language-text\">db.mariadb</code> properties accordingly.</p>\n<h3 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker</h3>\n<p>To ensure tests are executed in a proper environment, we leverage <a href=\"https://docs.docker.com/\">Docker</a> and <a href=\"https://docs.docker.com/compose/\">Docker Compose</a>. To each environment corresponds a directory inside the \"./env\" folder. Inside each folder, you will find the \"docker-compose.yml\" declaration file and its associated resources.</p>\n<ul>\n<li><code class=\"language-text\">docker-compose.yml</code><br>\nThe <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> file declare the Nikita container with its test environment as well as its service dependencies such as databases services.</li>\n<li><code class=\"language-text\">Dockerfile</code>\nThe <a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile</a> declare instructions to build the containers.</li>\n<li><code class=\"language-text\">test.coffee</code>\nThe configuration file is used to activate selected tests and configured the Nikita sessions executed inside.</li>\n</ul>\n<p>The commands to execute the tests are commons to every Docker environments and provide a lot of flexibility. From any environment directory:</p>\n<ul>\n<li><code class=\"language-text\">docker-compose up --abort-on-container-exit</code><br>\nRun the all test suite from the host shell.</li>\n<li><code class=\"language-text\">docker-compose run --rm nodejs</code><br>\nEnter inside the Nikita container and execute your commands.</li>\n<li><code class=\"language-text\">docker-compose run --rm nodejs &#39;test/**/*.coffee&#39;</code><br>\nRun a subset of the tests from the host shell.</li>\n</ul>\n<p>Here's an example to run tests on CentOS 7:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Download the source code</span>\n<span class=\"token function\">git</span> clone https://github.com/adaltas/node-nikita.git nikita\n<span class=\"token builtin class-name\">cd</span> nikita\n<span class=\"token comment\"># Install dependencies with NPM or Yarn</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token comment\"># Move to your targeted environment</span>\n<span class=\"token builtin class-name\">cd</span> env/centos7\n<span class=\"token comment\"># Run all tests</span>\ndocker-compose up --abort-on-container-exit\n<span class=\"token comment\"># Enter bash console</span>\ndocker-compose run --rm nodejs\n<span class=\"token comment\"># Run a subset of the tests</span>\ndocker-compose run --rm nodejs test/core</code></pre></div>\n<h3 id=\"lxd\" style=\"position:relative;\"><a href=\"#lxd\" aria-label=\"lxd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXD</h3>\n<p>Some tests are executed using LXD. The tests require a local LXD client. On a Linux hosts, you can follow the <a href=\"https://linuxcontainers.org/lxd/getting-started-cli/\">installation instructions</a>. On non Linux hosts, you can setup the client to communicate with a remote LXD server hosted on a virtual machine. You will however have to mount the project directory into the \"/nikita\" folder of the virtual machine. The provided Vagrantfile definition inside \"@nikitajs/core/env/cluster/assets\" will set you up.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># For windows and MacOS users</span>\n./bin/cluster start\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<p>For Windows and MacOS users, the procedure is abstracted inside the <code class=\"language-text\">./bin/cluster start</code> command. Below are the manual commands to make it work.</p>\n<ul>\n<li>Install:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Initialize the VM</span>\n<span class=\"token builtin class-name\">cd</span> assets <span class=\"token operator\">&amp;&amp;</span> vagrant up <span class=\"token operator\">&amp;&amp;</span> cd<span class=\"token punctuation\">..</span>\n<span class=\"token comment\"># Set up LXD client</span>\nlxc remote <span class=\"token function\">add</span> nikita <span class=\"token number\">127.0</span>.0.1:8443\nlxc remote switch nikita\n<span class=\"token comment\"># Initialize the container</span>\nnpx coffee start.coffee</code></pre></div>\n<ul>\n<li>Update the VM:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lxc remote switch <span class=\"token builtin class-name\">local</span>\nlxc remote remove nikita\n<span class=\"token comment\"># Note, password is \"secret\"</span>\nlxc remote <span class=\"token function\">add</span> nikita <span class=\"token number\">127.0</span>.0.1:8443\nlxc remote switch nikita</code></pre></div>\n<p>If you are running into an issue with permission on tmp as below:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>/29<span class=\"token punctuation\">]</span>: configuring certificate server instance\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> IOError: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">13</span><span class=\"token punctuation\">]</span> Permission denied: <span class=\"token string\">'/tmp/tmp_Tm1l_'</span></code></pre></div>\n<p>Host must have <code class=\"language-text\">fs.protected_regular</code> set to <code class=\"language-text\">0</code>r, eg <code class=\"language-text\">echo &#39;0&#39; &gt; /proc/sys/fs/protected_regular &amp;&amp; sysctl -p &amp;&amp; sysctl -a</code>. In our Physical -> VM -> LXD setup, the parameters shall be set in the VM, no restart is required to install the FreeIPA server, just uninstall it first with <code class=\"language-text\">ipa-server-install --uninstall</code> before re-executing the install command.</p>\n<p>Here's an example to run tests for FreeIPA:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># For windows and osx user</span>\n<span class=\"token punctuation\">..</span>/lxd/bin/cluster start\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NIKITA_HOME</span><span class=\"token operator\">=</span>/nikita\n<span class=\"token comment\"># Start the server</span>\ncoffee ./env/ipa/start.coffee\n<span class=\"token comment\"># Run all the tests</span>\nlxc <span class=\"token builtin class-name\">exec</span> freeipa --cwd /nikita/packages/ipa <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token comment\"># Run selected tests</span>\nlxc <span class=\"token builtin class-name\">exec</span> freeipa --cwd /nikita/packages/ipa npx mocha test/user/exists.coffee\n<span class=\"token comment\"># Enter the IPA container</span>\nlxc <span class=\"token builtin class-name\">exec</span> freeipa --cwd /nikita/packages/ipa <span class=\"token function\">bash</span>\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>","fields":{"slug":"/about/developers/","edit_url":"https://github.com/adaltas/node-nikita-docs/edit/master/src/md/about/developers.md"},"frontmatter":{"title":"Developer","description":null,"keywords":null}}},"pageContext":{}}}