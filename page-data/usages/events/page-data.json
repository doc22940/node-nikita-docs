{"componentChunkName":"component---src-templates-template-js","path":"/usages/events/","result":{"data":{"page":{"html":"<h1 id=\"events-api\" style=\"position:relative;\"><a href=\"#events-api\" aria-label=\"events api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events API</h1>\n<div class=\"toc\">\n<h2><a href=\"#toc\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#available-events\">Available events</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>A Nikita session extends the <a href=\"https://nodejs.org/api/events.html\">native Node.js Events API</a>. It provides a facility to listen to internal notification and know the current state of the program.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Listening to events with the Node.js API is quite simple with the <code class=\"language-text\">on(event, handler)</code>. The \"handler\" argument is the function provided by the user to catch events. </p>\n<p>It is not recommended to call the <code class=\"language-text\">emit</code> function directly but instead your are encouraged to call the <code class=\"language-text\">nikita.log</code> function which will associate the \"type\" property with the event of the same name.</p>\n<h2 id=\"available-events\" style=\"position:relative;\"><a href=\"#available-events\" aria-label=\"available events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available events</h2>\n<p>The existing events provide you with multiple entry points to catch information across the entire session life cycle:</p>\n<ul>\n<li><code class=\"language-text\">lifecycle</code><br>\nIt indicates execution directives which may occur at different steps of the action life cycle. it uses the \"message\" property as a code to define what is happening. The following values exists: <code class=\"language-text\">disabled_false</code>, <code class=\"language-text\">disabled_true</code>, <code class=\"language-text\">conditions_passed</code>, <code class=\"language-text\">conditions_failed</code>. The handler function is called with a <code class=\"language-text\">log</code> argument.</li>\n<li><code class=\"language-text\">text</code><br>\nIt is the default event when the function <code class=\"language-text\">log</code> is called. The handler function is called with a <code class=\"language-text\">log</code> argument.</li>\n<li><code class=\"language-text\">header</code><br>\nIt is throw before an action is called if it contains the <code class=\"language-text\">header</code> metadata.</li>\n<li><code class=\"language-text\">stdin</code><br>\nIt represents some stdin content, used for example by the <code class=\"language-text\">system.execute</code> action to provide the script being executed.</li>\n<li><code class=\"language-text\">diff</code><br>\nIt represents content modification, used for example by the <code class=\"language-text\">file</code> action.</li>\n<li><code class=\"language-text\">handled</code><br>\nIt is emitted once an handler has completed, whether it failed or was successful, and before calling the callback.</li>\n<li><code class=\"language-text\">stdout_stream</code><br>\nIt is a stream input reader receiving stdout content, used for example by the <code class=\"language-text\">system.execute</code> action to send stdout output from the executed command.</li>\n<li><code class=\"language-text\">stderr_stream</code><br>\nIt is a stream input reader receiving stderr content, used for example by the <code class=\"language-text\">system.execute</code> action to send stderr output from the executed command.</li>\n<li><code class=\"language-text\">end</code><br>\nIt is throw if no error occured when no more action are scheduled for execution.</li>\n<li><code class=\"language-text\">error</code><br>\nIt is thrown when an error occurred.</li>\n</ul>\n<p>The majority of the user handler is called with a single <code class=\"language-text\">log</code> argument. It is an object with the following keys:</p>","fields":{"slug":"/usages/events/","edit_url":"https://github.com/adaltas/node-nikita-docs/edit/master/src/md/usages/events.md"},"frontmatter":{"title":"Events API","description":null,"keywords":null}}},"pageContext":{}}}